/*
 * PKCS #11 API
 *
 * Copyright (c) 2020 Alexei A. Smekalkine <ikle@ikle.ru>
 *
 * Standard: PKCS #11 v2.40
 * SPDX-License-Identifier: BSD-2-Clause
 */

#ifndef PKCS11_H
#define PKCS11_H  1

#include <stddef.h>

#define NULL_PTR	NULL

#define CK_FALSE	0
#define CK_TRUE		1

/* 2.2 Pointer-related macros */

#define CK_PTR		*

#define CK_DEFINE_FUNCTION(returnType, name)		returnType name
#define CK_DECLARE_FUNCTION(returnType, name)		returnType name
#define CK_DECLARE_FUNCTION_POINTER(returnType, name)	returnType (* name)
#define CK_CALLBACK_FUNCTION(returnType, name)		returnType (* name)

/* 1.3 Symbols and abbreviations */

typedef unsigned char		CK_BYTE;
typedef CK_BYTE			CK_CHAR;
typedef CK_BYTE			CK_UTF8CHAR;
typedef CK_BYTE			CK_BBOOL;
typedef unsigned long		CK_ULONG;
typedef long			CK_LONG;
typedef CK_ULONG		CK_FLAGS;

typedef CK_BYTE CK_PTR		CK_BYTE_PTR;
typedef CK_CHAR CK_PTR		CK_CHAR_PTR;
typedef CK_UTF8CHAR CK_PTR	CK_UTF8CHAR_PTR;
typedef CK_ULONG CK_PTR		CK_ULONG_PTR;
typedef void CK_PTR		CK_VOID_PTR;
typedef CK_VOID_PTR CK_PTR	CK_VOID_PTR_PTR;

/* 3.1 General information */

typedef struct CK_VERSION {
	CK_BYTE major;
	CK_BYTE minor;
} CK_VERSION;

typedef CK_VERSION CK_PTR	CK_VERSION_PTR;

typedef struct CK_INFO {
	CK_VERSION cryptokiVersion;
	CK_UTF8CHAR manufacturerID[32];
	CK_FLAGS flags;
	CK_UTF8CHAR libraryDescription[32];
	CK_VERSION libraryVersion;
} CK_INFO;

typedef CK_INFO CK_PTR		CK_INFO_PTR;

typedef CK_ULONG CK_NOTIFICATION;

#define CKN_SURRENDER		0

/* 3.2 Slot and token types */

typedef CK_ULONG		CK_SLOT_ID;
typedef CK_SLOT_ID CK_PTR	CK_SLOT_ID_PTR;

typedef struct CK_SLOT_INFO {
	CK_UTF8CHAR	slotDescription[64];
	CK_UTF8CHAR	manufacturerID[32];
	CK_FLAGS	flags;
	CK_VERSION	hardwareVersion;
	CK_VERSION	firmwareVersion;
} CK_SLOT_INFO;

typedef CK_SLOT_INFO CK_PTR	CK_SLOT_INFO_PTR;

#define CKF_TOKEN_PRESENT	0x00000001ul
#define CKF_REMOVABLE_DEVICE	0x00000002ul
#define CKF_HW_SLOT		0x00000004ul

typedef struct CK_TOKEN_INFO {
	CK_UTF8CHAR	label[32];
	CK_UTF8CHAR	manufacturerID[32];
	CK_UTF8CHAR	model[16];
	CK_CHAR		serialNumber[16];
	CK_FLAGS	flags;
	CK_ULONG	ulMaxSessionCount;
	CK_ULONG	ulSessionCount;
	CK_ULONG	ulMaxRwSessionCount;
	CK_ULONG	ulRwSessionCount;
	CK_ULONG	ulMaxPinLen;
	CK_ULONG	ulMinPinLen;
	CK_ULONG	ulTotalPublicMemory;
	CK_ULONG	ulFreePublicMemory;
	CK_ULONG	ulTotalPrivateMemory;
	CK_ULONG	ulFreePrivateMemory;
	CK_VERSION	hardwareVersion;
	CK_VERSION	firmwareVersion;
	CK_CHAR		utcTime[16];
} CK_TOKEN_INFO;

typedef CK_TOKEN_INFO CK_PTR	CK_TOKEN_INFO_PTR;

#define CKF_RNG					0x00000001ul
#define CKF_WRITE_PROTECTED			0x00000002ul
#define CKF_LOGIN_REQUIRED			0x00000004ul
#define CKF_USER_PIN_INITIALIZED		0x00000008ul
#define CKF_RESTORE_KEY_NOT_NEEDED		0x00000020ul
#define CKF_CLOCK_ON_TOKEN			0x00000040ul
#define CKF_PROTECTED_AUTHENTICATION_PATH	0x00000100ul
#define CKF_DUAL_CRYPTO_OPERATIONS		0x00000200ul
#define CKF_TOKEN_INITIALIZED			0x00000400ul
#define CKF_SECONDARY_AUTHENTICATION		0x00000800ul
#define CKF_USER_PIN_COUNT_LOW			0x00010000ul
#define CKF_USER_PIN_FINAL_TRY			0x00020000ul
#define CKF_USER_PIN_LOCKED			0x00040000ul
#define CKF_USER_PIN_TO_BE_CHANGED		0x00080000ul
#define CKF_SO_PIN_COUNT_LOW			0x00100000ul
#define CKF_SO_PIN_FINAL_TRY			0x00200000ul
#define CKF_SO_PIN_LOCKED			0x00400000ul
#define CKF_SO_PIN_TO_BE_CHANGED		0x00800000ul
#define CKF_ERROR_STATE				0x01000000ul

#define CK_UNAVAILABLE_INFORMATION	(~0ul)
#define CK_EFFECTIVELY_INFINITE		0

/* 3.3 Session types */

typedef CK_ULONG			CK_SESSION_HANDLE;
typedef CK_SESSION_HANDLE CK_PTR	CK_SESSION_HANDLE_PTR;

#define CK_INVALID_HANDLE	0

typedef CK_ULONG		CK_USER_TYPE;

#define CKU_SO			0
#define CKU_USER		1
#define CKU_CONTEXT_SPECIFIC	2

typedef CK_ULONG		CK_STATE;

#define CKS_RO_PUBLIC_SESSION	0
#define CKS_RO_USER_FUNCTIONS	1
#define CKS_RW_PUBLIC_SESSION	2
#define CKS_RW_USER_FUNCTIONS	3
#define CKS_RW_SO_FUNCTIONS	4

typedef struct CK_SESSION_INFO {
	CK_SLOT_ID	slotID;
	CK_STATE	state;
	CK_FLAGS	flags;
	CK_ULONG	ulDeviceError;
} CK_SESSION_INFO;

typedef CK_SESSION_INFO CK_PTR	CK_SESSION_INFO_PTR;

#define CKF_RW_SESSION		0x00000002ul
#define CKF_SERIAL_SESSION	0x00000004ul

/* 3.4 Object types */

typedef CK_ULONG		CK_OBJECT_HANDLE;
typedef CK_OBJECT_HANDLE CK_PTR	CK_OBJECT_HANDLE_PTR;

typedef CK_ULONG		CK_OBJECT_CLASS;
typedef CK_OBJECT_CLASS CK_PTR	CK_OBJECT_CLASS_PTR;

#define CKO_VENDOR_DEFINED 	0x80000000

#define CKO_DATA		0
#define CKO_CERTIFICATE		1
#define CKO_PUBLIC_KEY		2
#define CKO_PRIVATE_KEY		3
#define CKO_SECRET_KEY		4
#define CKO_HW_FEATURE		5
#define CKO_DOMAIN_PARAMETERS	6
#define CKO_MECHANISM		7

typedef CK_ULONG		CK_HW_FEATURE_TYPE;

#define CKH_VENDOR_DEFINED	0x80000000

#define CKH_MONOTONIC_COUNTER	1
#define CKH_CLOCK		2
#define CKH_USER_INTERFACE	3

typedef CK_ULONG		CK_KEY_TYPE;

#define CKK_RSA			0
#define CKK_DSA			1
#define CKK_DH			2
#define CKK_ECDSA		3
#define CKK_EC			3
#define CKK_X9_42_DH		4
#define CKK_KEA			5

#define CKK_GENERIC_SECRET	0x10
#define CKK_RC2			0x11
#define CKK_RC4			0x12
#define CKK_DES			0x13
#define CKK_DES2		0x14
#define CKK_DES3		0x15
#define CKK_CAST		0x16
#define CKK_CAST3		0x17
#define CKK_CAST5		0x18
#define CKK_CAST128		0x18
#define CKK_RC5			0x19
#define CKK_IDEA		0x1a
#define CKK_SKIPJACK		0x1b
#define CKK_BATON		0x1c
#define CKK_JUNIPER		0x1d
#define CKK_CDMF		0x1e
#define CKK_AES			0x1f

#define CKK_GOSTR3410		0x30
#define CKK_GOSTR3411		0x31
#define CKK_GOST28147		0x32

typedef CK_ULONG	CK_CERTIFICATE_TYPE;

#define CKC_VENDOR_DEFINED	0x80000000

#define CKC_X_509		0
#define CKC_X_509_ATTR_CERT	1

typedef CK_ULONG	CK_CERTIFICATE_CATEGORY;

#define CK_CERTIFICATE_CATEGORY_UNSPECIFIED	0
#define CK_CERTIFICATE_CATEGORY_TOKEN_USER	1
#define CK_CERTIFICATE_CATEGORY_AUTHORITY	2
#define CK_CERTIFICATE_CATEGORY_OTHER_ENTITY	3

typedef CK_ULONG	CK_ATTRIBUTE_TYPE;

#define CKF_ARRAY_ATTRIBUTE	0x40000000ul
#define CKA_VENDOR_DEFINED	0x80000000ul

#define CKA_CLASS		0x0000
#define CKA_TOKEN		0x0001
#define CKA_PRIVATE		0x0002
#define CKA_LABEL		0x0003

#define CKA_APPLICATION		0x0010
#define CKA_VALUE		0x0011
#define CKA_OBJECT_ID		0x0012

#define CKA_CERTIFICATE_TYPE		0x0080
#define CKA_ISSUER			0x0081
#define CKA_SERIAL_NUMBER		0x0082
#define CKA_AC_ISSUER			0x0083
#define CKA_OWNER			0x0084
#define CKA_ATTR_TYPES			0x0085
#define CKA_TRUSTED			0x0086
#define CKA_CERTIFICATE_CATEGORY	0x0087
#define CKA_JAVA_MIDP_SECURITY_DOMAIN	0x0088
#define CKA_URL				0x0089
#define CKA_HASH_OF_SUBJECT_PUBLIC_KEY	0x008a
#define CKA_HASH_OF_ISSUER_PUBLIC_KEY	0x008b
#define CKA_NAME_HASH_ALGORITHM		0x008c

#define CKA_CHECK_VALUE		0x0090

#define CKA_KEY_TYPE		0x0100
#define CKA_SUBJECT		0x0101
#define CKA_ID			0x0102
#define CKA_SENSITIVE		0x0103
#define CKA_ENCRYPT		0x0104
#define CKA_DECRYPT		0x0105
#define CKA_WRAP		0x0106
#define CKA_UNWRAP		0x0107
#define CKA_SIGN		0x0108
#define CKA_SIGN_RECOVER	0x0109
#define CKA_VERIFY		0x010a
#define CKA_VERIFY_RECOVER	0x010b
#define CKA_DERIVE		0x010c

#define CKA_START_DATE		0x0110
#define CKA_END_DATE		0x0111

#define CKA_MODULUS		0x0120
#define CKA_MODULUS_BITS	0x0121
#define CKA_PUBLIC_EXPONENT	0x0122
#define CKA_PRIVATE_EXPONENT	0x0123
#define CKA_PRIME_1		0x0124
#define CKA_PRIME_2		0x0125
#define CKA_EXPONENT_1		0x0126
#define CKA_EXPONENT_2		0x0127
#define CKA_COEFFICIENT		0x0128

#define CKA_PRIME		0x0130
#define CKA_SUBPRIME		0x0131
#define CKA_BASE		0x0132
#define CKA_PRIME_BITS		0x0133
#define CKA_SUB_PRIME_BITS	0x0134

#define CKA_VALUE_BITS		0x0160
#define CKA_VALUE_LEN		0x0161
#define CKA_EXTRACTABLE		0x0162
#define CKA_LOCAL		0x0163
#define CKA_NEVER_EXTRACTABLE	0x0164
#define CKA_ALWAYS_SENSITIVE	0x0165
#define CKA_KEY_GEN_MECHANISM	0x0166

#define CKA_MODIFIABLE		0x0170
#define CKA_COPYABLE		0x0171
#define CKA_DESTROYABLE		0x0172

#define CKA_ECDSA_PARAMS	0x0180
#define CKA_EC_PARAMS		0x0180
#define CKA_EC_POINT		0x0181

#define CKA_SECONDARY_AUTH	0x0200
#define CKA_AUTH_PIN_FLAGS	0x0201
#define CKA_ALWAYS_AUTHENTICATE	0x0202

#define CKA_WRAP_WITH_TRUSTED	0x00000210
#define CKA_WRAP_TEMPLATE	(CKF_ARRAY_ATTRIBUTE | 0x0211)
#define CKA_UNWRAP_TEMPLATE	(CKF_ARRAY_ATTRIBUTE | 0x0212)

#define CKA_GOSTR3410PARAMS	0x0250
#define CKA_GOSTR3411PARAMS	0x0251
#define CKA_GOST28147PARAMS	0x0252

#define CKA_HW_FEATURE_TYPE	0x0300
#define CKA_RESET_ON_INIT	0x0301
#define CKA_HAS_RESET		0x0302

#define CKA_PIXEL_X		0x0400
#define CKA_PIXEL_Y		0x0401
#define CKA_RESOLUTION		0x0402
#define CKA_CHAR_ROWS		0x0403
#define CKA_CHAR_COLUMNS	0x0404
#define CKA_COLOR		0x0405
#define CKA_BITS_PER_PIXEL	0x0406

#define CKA_CHAR_SETS		0x0480
#define CKA_ENCODING_METHODS	0x0481
#define CKA_MIME_TYPES		0x0482

#define CKA_MECHANISM_TYPE		0x0500
#define CKA_REQUIRED_CMS_ATTRIBUTES	0x0501
#define CKA_DEFAULT_CMS_ATTRIBUTES	0x0502
#define CKA_SUPPORTED_CMS_ATTRIBUTES	0x0503

#define CKA_ALLOWED_MECHANISMS		(CKF_ARRAY_ATTRIBUTE | 0x0600)

typedef struct CK_ATTRIBUTE {
	CK_ATTRIBUTE_TYPE	type;
	CK_VOID_PTR		pValue;
	CK_ULONG		ulValueLen;
} CK_ATTRIBUTE;

typedef CK_ATTRIBUTE	CK_PTR CK_ATTRIBUTE_PTR;

typedef struct CK_DATE {
	CK_CHAR		year[4];
	CK_CHAR		month[2];
	CK_CHAR		day[2];
} CK_DATE;

typedef CK_ULONG	CK_JAVA_MIDP_SECURITY_DOMAIN;

#define CK_SECURITY_DOMAIN_UNSPECIFIED		0
#define CK_SECURITY_DOMAIN_MANUFACTURER		1
#define CK_SECURITY_DOMAIN_OPERATOR		2
#define CK_SECURITY_DOMAIN_THIRD_PARTY		3

/* 3.5 Data types for mechanisms */

typedef CK_ULONG	CK_MECHANISM_TYPE;

#define CKM_VENDOR_DEFINED	0x80000000ul

#define CKM_RSA_PKCS_KEY_PAIR_GEN	0x0000
#define CKM_RSA_PKCS			0x0001
#define CKM_RSA_9796			0x0002
#define CKM_RSA_X_509			0x0003
#define CKM_MD2_RSA_PKCS		0x0004
#define CKM_MD5_RSA_PKCS		0x0005
#define CKM_SHA1_RSA_PKCS		0x0006
#define CKM_RIPEMD128_RSA_PKCS		0x0007
#define CKM_RIPEMD160_RSA_PKCS		0x0008
#define CKM_RSA_PKCS_OAEP		0x0009
#define CKM_RSA_X9_31_KEY_PAIR_GEN	0x000a
#define CKM_RSA_X9_31			0x000b
#define CKM_SHA1_RSA_X9_31		0x000c
#define CKM_RSA_PKCS_PSS		0x000d
#define CKM_SHA1_RSA_PKCS_PSS		0x000e

#define CKM_DSA_KEY_PAIR_GEN		0x0010
#define CKM_DSA				0x0011
#define CKM_DSA_SHA1			0x0012
#define CKM_DSA_SHA224			0x0013
#define CKM_DSA_SHA256			0x0014
#define CKM_DSA_SHA384			0x0015
#define CKM_DSA_SHA512			0x0016

#define CKM_DH_PKCS_KEY_PAIR_GEN	0x0020
#define CKM_DH_PKCS_DERIVE		0x0021

#define CKM_X9_42_DH_KEY_PAIR_GEN	0x0030
#define CKM_X9_42_DH_DERIVE		0x0031
#define CKM_X9_42_DH_HYBRID_DERIVE	0x0032
#define CKM_X9_42_MQV_DERIVE		0x0033

#define CKM_SHA256_RSA_PKCS		0x0040
#define CKM_SHA384_RSA_PKCS		0x0041
#define CKM_SHA512_RSA_PKCS		0x0042
#define CKM_SHA256_RSA_PKCS_PSS		0x0043
#define CKM_SHA384_RSA_PKCS_PSS		0x0044
#define CKM_SHA512_RSA_PKCS_PSS		0x0045
#define CKM_SHA224_RSA_PKCS		0x0046
#define CKM_SHA224_RSA_PKCS_PSS		0x0047

#define CKM_RC2_KEY_GEN			0x0100
#define CKM_RC2_ECB			0x0101
#define CKM_RC2_CBC			0x0102
#define CKM_RC2_MAC			0x0103
#define CKM_RC2_MAC_GENERAL		0x0104
#define CKM_RC2_CBC_PAD			0x0105

#define CKM_RC4_KEY_GEN			0x0110
#define CKM_RC4				0x0111

#define CKM_DES_KEY_GEN			0x0120
#define CKM_DES_ECB			0x0121
#define CKM_DES_CBC			0x0122
#define CKM_DES_MAC			0x0123
#define CKM_DES_MAC_GENERAL		0x0124
#define CKM_DES_CBC_PAD			0x0125

#define CKM_DES2_KEY_GEN		0x0130
#define CKM_DES3_KEY_GEN		0x0131
#define CKM_DES3_ECB			0x0132
#define CKM_DES3_CBC			0x0133
#define CKM_DES3_MAC			0x0134
#define CKM_DES3_MAC_GENERAL		0x0135
#define CKM_DES3_CBC_PAD		0x0136
#define CKM_DES3_CMAC			0x0138

#define CKM_CDMF_KEY_GEN		0x0140
#define CKM_CDMF_ECB			0x0141
#define CKM_CDMF_CBC			0x0142
#define CKM_CDMF_MAC			0x0143
#define CKM_CDMF_MAC_GENERAL		0x0144
#define CKM_CDMF_CBC_PAD		0x0145

#define CKM_MD2				0x0200
#define CKM_MD2_HMAC			0x0201
#define CKM_MD2_HMAC_GENERAL		0x0202

#define CKM_MD5				0x0210
#define CKM_MD5_HMAC			0x0211
#define CKM_MD5_HMAC_GENERAL		0x0212

#define CKM_SHA_1			0x0220
#define CKM_SHA_1_HMAC			0x0221
#define CKM_SHA_1_HMAC_GENERAL		0x0222

#define CKM_RIPEMD128			0x0230
#define CKM_RIPEMD128_HMAC		0x0231
#define CKM_RIPEMD128_HMAC_GENERAL	0x0232

#define CKM_RIPEMD160			0x0240
#define CKM_RIPEMD160_HMAC		0x0241
#define CKM_RIPEMD160_HMAC_GENERAL	0x0242

#define CKM_SHA256			0x0250
#define CKM_SHA256_HMAC			0x0251
#define CKM_SHA256_HMAC_GENERAL		0x0252

#define CKM_SHA224			0x0255
#define CKM_SHA224_HMAC			0x0256
#define CKM_SHA224_HMAC_GENERAL		0x0257

#define CKM_SHA384			0x0260
#define CKM_SHA384_HMAC			0x0261
#define CKM_SHA384_HMAC_GENERAL		0x0262

#define CKM_SHA512			0x0270
#define CKM_SHA512_HMAC			0x0271
#define CKM_SHA512_HMAC_GENERAL		0x0272

#define CKM_CAST_KEY_GEN		0x0300
#define CKM_CAST_ECB			0x0301
#define CKM_CAST_CBC			0x0302
#define CKM_CAST_MAC			0x0303
#define CKM_CAST_MAC_GENERAL		0x0304
#define CKM_CAST_CBC_PAD		0x0305

#define CKM_CAST3_KEY_GEN		0x0310
#define CKM_CAST3_ECB			0x0311
#define CKM_CAST3_CBC			0x0312
#define CKM_CAST3_MAC			0x0313
#define CKM_CAST3_MAC_GENERAL		0x0314
#define CKM_CAST3_CBC_PAD		0x0315

#define CKM_CAST5_KEY_GEN		0x0320
#define CKM_CAST128_KEY_GEN		0x0320
#define CKM_CAST5_ECB			0x0321
#define CKM_CAST128_ECB			0x0321
#define CKM_CAST5_CBC			0x0322
#define CKM_CAST128_CBC			0x0322
#define CKM_CAST5_MAC			0x0323
#define CKM_CAST128_MAC			0x0323
#define CKM_CAST5_MAC_GENERAL		0x0324
#define CKM_CAST128_MAC_GENERAL		0x0324
#define CKM_CAST5_CBC_PAD		0x0325
#define CKM_CAST128_CBC_PAD		0x0325

#define CKM_RC5_KEY_GEN			0x0330
#define CKM_RC5_ECB			0x0331
#define CKM_RC5_CBC			0x0332
#define CKM_RC5_MAC			0x0333
#define CKM_RC5_MAC_GENERAL		0x0334
#define CKM_RC5_CBC_PAD			0x0335

#define CKM_IDEA_KEY_GEN		0x0340
#define CKM_IDEA_ECB			0x0341
#define CKM_IDEA_CBC			0x0342
#define CKM_IDEA_MAC			0x0343
#define CKM_IDEA_MAC_GENERAL		0x0344
#define CKM_IDEA_CBC_PAD		0x0345

#define CKM_GENERIC_SECRET_KEY_GEN	0x0350

#define CKM_CONCATENATE_BASE_AND_KEY	0x0360

#define CKM_CONCATENATE_BASE_AND_DATA	0x0362
#define CKM_CONCATENATE_DATA_AND_BASE	0x0363
#define CKM_XOR_BASE_AND_DATA		0x0364
#define CKM_EXTRACT_KEY_FROM_KEY	0x0365

#define CKM_SSL3_PRE_MASTER_KEY_GEN	0x0370
#define CKM_SSL3_MASTER_KEY_DERIVE	0x0371
#define CKM_SSL3_KEY_AND_MAC_DERIVE	0x0372
#define CKM_SSL3_MASTER_KEY_DERIVE_DH	0x0373
#define CKM_TLS_PRE_MASTER_KEY_GEN	0x0374
#define CKM_TLS_MASTER_KEY_DERIVE	0x0375
#define CKM_TLS_KEY_AND_MAC_DERIVE	0x0376
#define CKM_TLS_MASTER_KEY_DERIVE_DH	0x0377

#define CKM_SSL3_MD5_MAC		0x0380
#define CKM_SSL3_SHA1_MAC		0x0381

#define CKM_MD5_KEY_DERIVATION		0x0390
#define CKM_MD2_KEY_DERIVATION		0x0391
#define CKM_SHA1_KEY_DERIVATION		0x0392
#define CKM_SHA256_KEY_DERIVATION	0x0393
#define CKM_SHA384_KEY_DERIVATION	0x0394
#define CKM_SHA512_KEY_DERIVATION	0x0395
#define CKM_SHA224_KEY_DERIVATION	0x0396

#define CKM_PBE_MD2_DES_CBC		0x03a0
#define CKM_PBE_MD5_DES_CBC		0x03a1
#define CKM_PBE_MD5_CAST_CBC		0x03a2
#define CKM_PBE_MD5_CAST3_CBC		0x03a3
#define CKM_PBE_MD5_CAST5_CBC		0x03a4
#define CKM_PBE_MD5_CAST128_CBC		0x03a4
#define CKM_PBE_SHA1_CAST5_CBC		0x03a5
#define CKM_PBE_SHA1_CAST128_CBC	0x03a5
#define CKM_PBE_SHA1_RC4_128		0x03a6
#define CKM_PBE_SHA1_RC4_40		0x03a7
#define CKM_PBE_SHA1_DES3_EDE_CBC	0x03a8
#define CKM_PBE_SHA1_DES2_EDE_CBC	0x03a9
#define CKM_PBE_SHA1_RC2_128_CBC	0x03aa
#define CKM_PBE_SHA1_RC2_40_CBC		0x03ab

#define CKM_PKCS5_PBKD2			0x03b0

#define CKM_PBA_SHA1_WITH_SHA1_HMAC	0x03c0

#define CKM_KEY_WRAP_LYNKS		0x0400
#define CKM_KEY_WRAP_SET_OAEP		0x0401

#define CKM_SKIPJACK_KEY_GEN		0x1000
#define CKM_SKIPJACK_ECB64		0x1001
#define CKM_SKIPJACK_CBC64		0x1002
#define CKM_SKIPJACK_OFB64		0x1003
#define CKM_SKIPJACK_CFB64		0x1004
#define CKM_SKIPJACK_CFB32		0x1005
#define CKM_SKIPJACK_CFB16		0x1006
#define CKM_SKIPJACK_CFB8		0x1007
#define CKM_SKIPJACK_WRAP		0x1008
#define CKM_SKIPJACK_PRIVATE_WRAP	0x1009
#define CKM_SKIPJACK_RELAYX		0x100a

#define CKM_KEA_KEY_PAIR_GEN		0x1010
#define CKM_KEA_KEY_DERIVE		0x1011

#define CKM_FORTEZZA_TIMESTAMP		0x1020

#define CKM_BATON_KEY_GEN		0x1030
#define CKM_BATON_ECB128		0x1031
#define CKM_BATON_ECB96			0x1032
#define CKM_BATON_CBC128		0x1033
#define CKM_BATON_COUNTER		0x1034
#define CKM_BATON_SHUFFLE		0x1035
#define CKM_BATON_WRAP			0x1036

#define CKM_ECDSA_KEY_PAIR_GEN		0x1040
#define CKM_EC_KEY_PAIR_GEN		0x1040
#define CKM_ECDSA			0x1041
#define CKM_ECDSA_SHA1			0x1042
#define CKM_ECDSA_SHA224		0x1043
#define CKM_ECDSA_SHA256		0x1044
#define CKM_ECDSA_SHA384		0x1045
#define CKM_ECDSA_SHA512		0x1046

#define CKM_ECDH1_DERIVE		0x1050
#define CKM_ECDH1_COFACTOR_DERIVE	0x1051
#define CKM_ECMQV_DERIVE		0x1052

#define CKM_JUNIPER_KEY_GEN		0x1060
#define CKM_JUNIPER_ECB128		0x1061
#define CKM_JUNIPER_CBC128		0x1062
#define CKM_JUNIPER_COUNTER		0x1063
#define CKM_JUNIPER_SHUFFLE		0x1064
#define CKM_JUNIPER_WRAP		0x1065

#define CKM_FASTHASH			0x1070

#define CKM_AES_KEY_GEN			0x1080
#define CKM_AES_ECB			0x1081
#define CKM_AES_CBC			0x1082
#define CKM_AES_MAC			0x1083
#define CKM_AES_MAC_GENERAL		0x1084
#define CKM_AES_CBC_PAD			0x1085
#define CKM_AES_CTR			0x1086
#define CKM_AES_GCM			0x1087
#define CKM_AES_CCM			0x1088
#define CKM_AES_CTS			0x1089
#define CKM_AES_CMAC			0x108a

#define CKM_BLOWFISH_KEY_GEN		0x1090
#define CKM_BLOWFISH_CBC		0x1091
#define CKM_TWOFISH_KEY_GEN		0x1092
#define CKM_TWOFISH_CBC			0x1093

#define CKM_DES_ECB_ENCRYPT_DATA	0x1100
#define CKM_DES_CBC_ENCRYPT_DATA	0x1101
#define CKM_DES3_ECB_ENCRYPT_DATA	0x1102
#define CKM_DES3_CBC_ENCRYPT_DATA	0x1103
#define CKM_AES_ECB_ENCRYPT_DATA	0x1104
#define CKM_AES_CBC_ENCRYPT_DATA	0x1105

#define CKM_GOSTR3410_KEY_PAIR_GEN	0x1200
#define CKM_GOSTR3410			0x1201
#define CKM_GOSTR3410_WITH_GOSTR3411	0x1202
#define CKM_GOSTR3410_KEY_WRAP		0x1203
#define CKM_GOSTR3410_DERIVE		0x1204

#define CKM_GOSTR3411			0x1210
#define CKM_GOSTR3411_HMAC		0x1211

#define CKM_GOST28147_KEY_GEN		0x1220
#define CKM_GOST28147_ECB		0x1221
#define CKM_GOST28147			0x1222
#define CKM_GOST28147_MAC		0x1223
#define CKM_GOST28147_KEY_WRAP		0x1224

#define CKM_DSA_PARAMETER_GEN		0x2000
#define CKM_DH_PKCS_PARAMETER_GEN	0x2001
#define CKM_X9_42_DH_PARAMETER_GEN	0x2002
#define CKM_AES_KEY_WRAP		0x2109

typedef struct CK_MECHANISM {
	CK_MECHANISM_TYPE	mechanism;
	CK_VOID_PTR		pParameter;
	CK_ULONG		ulParameterLen;
} CK_MECHANISM;

typedef CK_MECHANISM CK_PTR	CK_MECHANISM_PTR;

typedef struct CK_MECHANISM_INFO {
	CK_ULONG	ulMinKeySize;
	CK_ULONG	ulMaxKeySize;
	CK_FLAGS	flags;
} CK_MECHANISM_INFO;

typedef CK_MECHANISM_INFO CK_PTR CK_MECHANISM_INFO_PTR;

#define CKF_HW			0x00000001ul
#define CKF_ENCRYPT		0x00000100ul
#define CKF_DECRYPT		0x00000200ul
#define CKF_DIGEST		0x00000400ul
#define CKF_SIGN		0x00000800ul
#define CKF_SIGN_RECOVER	0x00001000ul
#define CKF_VERIFY		0x00002000ul
#define CKF_VERIFY_RECOVER	0x00004000ul
#define CKF_GENERATE		0x00008000ul
#define CKF_GENERATE_KEY_PAIR	0x00010000ul
#define CKF_WRAP		0x00020000ul
#define CKF_UNWRAP		0x00040000ul
#define CKF_DERIVE		0x00080000ul

#define CKF_EC_F_P		0x00100000ul
#define CKF_EC_F_2M		0x00200000ul
#define CKF_EC_ECPARAMETERS	0x00400000ul
#define CKF_EC_NAMEDCURVE	0x00800000ul
#define CKF_EC_UNCOMPRESS	0x01000000ul
#define CKF_EC_COMPRESS		0x02000000ul

#define CKF_EXTENSION		0x80000000ul

/* 3.6 Function types */

typedef CK_ULONG	CK_RV;

#define CKR_VENDOR_DEFINED	0x80000000ul

#define CKR_OK					0x0000
#define CKR_CANCEL				0x0001
#define CKR_HOST_MEMORY				0x0002
#define CKR_SLOT_ID_INVALID			0x0003

#define CKR_GENERAL_ERROR			0x0005
#define CKR_FUNCTION_FAILED			0x0006
#define CKR_ARGUMENTS_BAD			0x0007
#define CKR_NO_EVENT				0x0008
#define CKR_NEED_TO_CREATE_THREADS		0x0009
#define CKR_CANT_LOCK				0x000a

#define CKR_ATTRIBUTE_READ_ONLY			0x0010
#define CKR_ATTRIBUTE_SENSITIVE			0x0011
#define CKR_ATTRIBUTE_TYPE_INVALID		0x0012
#define CKR_ATTRIBUTE_VALUE_INVALID		0x0013

#define CKR_ACTION_PROHIBITED			0x001b

#define CKR_DATA_INVALID			0x0020
#define CKR_DATA_LEN_RANGE			0x0021
#define CKR_DEVICE_ERROR			0x0030
#define CKR_DEVICE_MEMORY			0x0031
#define CKR_DEVICE_REMOVED			0x0032
#define CKR_ENCRYPTED_DATA_INVALID		0x0040
#define CKR_ENCRYPTED_DATA_LEN_RANGE		0x0041
#define CKR_FUNCTION_CANCELED			0x0050
#define CKR_FUNCTION_NOT_PARALLEL		0x0051

#define CKR_FUNCTION_NOT_SUPPORTED		0x0054

#define CKR_KEY_HANDLE_INVALID			0x0060

#define CKR_KEY_SIZE_RANGE			0x0062
#define CKR_KEY_TYPE_INCONSISTENT		0x0063
#define CKR_KEY_NOT_NEEDED			0x0064
#define CKR_KEY_CHANGED				0x0065
#define CKR_KEY_NEEDED				0x0066
#define CKR_KEY_INDIGESTIBLE			0x0067
#define CKR_KEY_FUNCTION_NOT_PERMITTED		0x0068
#define CKR_KEY_NOT_WRAPPABLE			0x0069
#define CKR_KEY_UNEXTRACTABLE			0x006a

#define CKR_MECHANISM_INVALID			0x0070
#define CKR_MECHANISM_PARAM_INVALID		0x0071

#define CKR_OBJECT_HANDLE_INVALID		0x0082
#define CKR_OPERATION_ACTIVE			0x0090
#define CKR_OPERATION_NOT_INITIALIZED		0x0091
#define CKR_PIN_INCORRECT			0x00a0
#define CKR_PIN_INVALID				0x00a1
#define CKR_PIN_LEN_RANGE			0x00a2
#define CKR_PIN_EXPIRED				0x00a3
#define CKR_PIN_LOCKED				0x00a4

#define CKR_SESSION_CLOSED			0x00b0
#define CKR_SESSION_COUNT			0x00b1
#define CKR_SESSION_HANDLE_INVALID		0x00b3
#define CKR_SESSION_PARALLEL_NOT_SUPPORTED	0x00b4
#define CKR_SESSION_READ_ONLY			0x00b5
#define CKR_SESSION_EXISTS			0x00b6
#define CKR_SESSION_READ_ONLY_EXISTS		0x00b7
#define CKR_SESSION_READ_WRITE_SO_EXISTS	0x00b8

#define CKR_SIGNATURE_INVALID			0x00c0
#define CKR_SIGNATURE_LEN_RANGE			0x00c1
#define CKR_TEMPLATE_INCOMPLETE			0x00d0
#define CKR_TEMPLATE_INCONSISTENT		0x00d1
#define CKR_TOKEN_NOT_PRESENT			0x00e0
#define CKR_TOKEN_NOT_RECOGNIZED		0x00e1
#define CKR_TOKEN_WRITE_PROTECTED		0x00e2
#define CKR_UNWRAPPING_KEY_HANDLE_INVALID	0x00f0
#define CKR_UNWRAPPING_KEY_SIZE_RANGE		0x00f1
#define CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT	0x00f2
#define CKR_USER_ALREADY_LOGGED_IN		0x0100
#define CKR_USER_NOT_LOGGED_IN			0x0101
#define CKR_USER_PIN_NOT_INITIALIZED		0x0102
#define CKR_USER_TYPE_INVALID			0x0103
#define CKR_USER_ANOTHER_ALREADY_LOGGED_IN	0x0104
#define CKR_USER_TOO_MANY_TYPES			0x0105

#define CKR_WRAPPED_KEY_INVALID			0x0110
#define CKR_WRAPPED_KEY_LEN_RANGE		0x0112
#define CKR_WRAPPING_KEY_HANDLE_INVALID		0x0113
#define CKR_WRAPPING_KEY_SIZE_RANGE		0x0114
#define CKR_WRAPPING_KEY_TYPE_INCONSISTENT	0x0115

#define CKR_RANDOM_SEED_NOT_SUPPORTED		0x0120
#define CKR_RANDOM_NO_RNG			0x0121

#define CKR_DOMAIN_PARAMS_INVALID		0x0130
#define CKR_CURVE_NOT_SUPPORTED			0x0140
#define CKR_BUFFER_TOO_SMALL			0x0150
#define CKR_SAVED_STATE_INVALID			0x0160
#define CKR_INFORMATION_SENSITIVE		0x0170
#define CKR_STATE_UNSAVEABLE			0x0180

#define CKR_CRYPTOKI_NOT_INITIALIZED		0x0190
#define CKR_CRYPTOKI_ALREADY_INITIALIZED	0x0191
#define CKR_MUTEX_BAD				0x01a0
#define CKR_MUTEX_NOT_LOCKED			0x01a1

#define CKR_NEW_PIN_MODE			0x01B0
#define CKR_NEXT_OTP				0x01B1

#define CKR_EXCEEDED_MAX_ITERATIONS		0x01B5
#define CKR_FIPS_SELF_TEST_FAILED		0x01B6
#define CKR_LIBRARY_LOAD_FAILED			0x01B7
#define CKR_PIN_TOO_WEAK			0x01B8
#define CKR_PUBLIC_KEY_INVALID			0x01B9

#define CKR_FUNCTION_REJECTED			0x0200

typedef CK_CALLBACK_FUNCTION(CK_RV, CK_NOTIFY) (
	CK_SESSION_HANDLE	hSession,
	CK_NOTIFICATION		event,
	CK_VOID_PTR		pApplication
);

typedef struct CK_FUNCTION_LIST		CK_FUNCTION_LIST;
typedef CK_FUNCTION_LIST CK_PTR		CK_FUNCTION_LIST_PTR;
typedef CK_FUNCTION_LIST_PTR CK_PTR	CK_FUNCTION_LIST_PTR_PTR;

/* 3.7 Locking-related types */

typedef CK_CALLBACK_FUNCTION (CK_RV, CK_CREATEMUTEX) (
	CK_VOID_PTR_PTR ppMutex
);

typedef CK_CALLBACK_FUNCTION (CK_RV, CK_DESTROYMUTEX) (
	CK_VOID_PTR pMutex
);

typedef CK_CALLBACK_FUNCTION (CK_RV, CK_LOCKMUTEX) (
	CK_VOID_PTR pMutex
);

typedef CK_CALLBACK_FUNCTION (CK_RV, CK_UNLOCKMUTEX) (
	CK_VOID_PTR pMutex
);

typedef struct CK_C_INITIALIZE_ARGS {
	CK_CREATEMUTEX	CreateMutex;
	CK_DESTROYMUTEX	DestroyMutex;
	CK_LOCKMUTEX	LockMutex;
	CK_UNLOCKMUTEX	UnlockMutex;
	CK_FLAGS	flags;
	CK_VOID_PTR	pReserved;
} CK_C_INITIALIZE_ARGS;

#define CKF_LIBRARY_CANT_CREATE_OS_THREADS	0x00000001
#define CKF_OS_LOCKING_OK			0x00000002

typedef CK_C_INITIALIZE_ARGS CK_PTR CK_C_INITIALIZE_ARGS_PTR;

#define CKF_DONT_BLOCK		1	/* for C_WaitForSlotEvent */

/* 5.4 General-purpose functions */

CK_DECLARE_FUNCTION (CK_RV, C_Initialize) (
	CK_VOID_PTR pInitArgs
);

CK_DECLARE_FUNCTION (CK_RV, C_Finalize) (
	CK_VOID_PTR pReserved
);

CK_DECLARE_FUNCTION (CK_RV, C_GetInfo) (
	CK_INFO_PTR pInfo
);

CK_DECLARE_FUNCTION (CK_RV, C_GetFunctionList) (
	CK_FUNCTION_LIST_PTR_PTR ppFunctionList
);

/* 5.5 Slot and token management functions */

CK_DECLARE_FUNCTION (CK_RV, C_GetSlotList) (
	CK_BBOOL		tokenPresent,
	CK_SLOT_ID_PTR		pSlotList,
	CK_ULONG_PTR		pulCount
);

CK_DECLARE_FUNCTION (CK_RV, C_GetSlotInfo) (
	CK_SLOT_ID		slotID,
	CK_SLOT_INFO_PTR	pInfo
);

CK_DECLARE_FUNCTION (CK_RV, C_GetTokenInfo) (
	CK_SLOT_ID		slotID,
	CK_TOKEN_INFO_PTR	pInfo
);

CK_DECLARE_FUNCTION (CK_RV, C_WaitForSlotEvent) (
	CK_FLAGS		flags,
	CK_SLOT_ID_PTR		pSlot,
	CK_VOID_PTR		pReserved
);

CK_DECLARE_FUNCTION (CK_RV, C_GetMechanismList) (
	CK_SLOT_ID		slotID,
	CK_MECHANISM_TYPE_PTR	pMechanismList,
	CK_ULONG_PTR		pulCount
);

CK_DECLARE_FUNCTION (CK_RV, C_GetMechanismInfo) (
	CK_SLOT_ID		slotID,
	CK_MECHANISM_TYPE	type,
	CK_MECHANISM_INFO_PTR	pInfo
);

CK_DECLARE_FUNCTION (CK_RV, C_InitToken) (
	CK_SLOT_ID		slotID,
	CK_UTF8CHAR_PTR		pPin,
	CK_ULONG		ulPinLen,
	CK_UTF8CHAR_PTR		pLabel
);

CK_DECLARE_FUNCTION (CK_RV, C_InitPIN) (
	CK_SESSION_HANDLE	hSession,
	CK_UTF8CHAR_PTR		pPin,
	CK_ULONG		ulPinLen
);

CK_DECLARE_FUNCTION (CK_RV, C_SetPIN) (
	CK_SESSION_HANDLE	hSession,
	CK_UTF8CHAR_PTR		pOldPin,
	CK_ULONG		ulOldLen,
	CK_UTF8CHAR_PTR		pNewPin,
	CK_ULONG		ulNewLen
);

/* 5.6 Session management functions */

CK_DECLARE_FUNCTION (CK_RV, C_OpenSession) (
	CK_SLOT_ID	slotID,
	CK_FLAGS		flags,
	CK_VOID_PTR		pApplication,
	CK_NOTIFY		Notify,
	CK_SESSION_HANDLE_PTR	phSession
);

CK_DECLARE_FUNCTION (CK_RV, C_CloseSession) (
	CK_SESSION_HANDLE hSession
);

CK_DECLARE_FUNCTION (CK_RV, C_CloseAllSessions) (
	CK_SLOT_ID slotID
);

CK_DECLARE_FUNCTION (CK_RV, C_GetOperationState) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pOperationState,
	CK_ULONG_PTR		pulOperationStateLen
);

CK_DECLARE_FUNCTION (CK_RV, C_SetOperationState) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pOperationState,
	CK_ULONG		ulOperationStateLen,
	CK_OBJECT_HANDLE	hEncryptionKey,
	CK_OBJECT_HANDLE	hAuthenticationKey
);

CK_DECLARE_FUNCTION (CK_RV, C_Login) (
	CK_SESSION_HANDLE	hSession,
	CK_USER_TYPE		userType,
	CK_UTF8CHAR_PTR		pPin,
	CK_ULONG		ulPinLen
);

CK_DECLARE_FUNCTION (CK_RV, C_Logout) (
	CK_SESSION_HANDLE hSession
);

/* 5.7 Object management functions */

CK_DECLARE_FUNCTION (CK_RV, C_CreateObject) (
	CK_SESSION_HANDLE	hSession,
	CK_ATTRIBUTE_PTR	pTemplate,
	CK_ULONG		ulCount,
	CK_OBJECT_HANDLE_PTR	phObject
);

CK_DECLARE_FUNCTION (CK_RV, C_CopyObject) (
	CK_SESSION_HANDLE	hSession,
	CK_OBJECT_HANDLE	hObject,
	CK_ATTRIBUTE_PTR	pTemplate,
	CK_ULONG		ulCount,
	CK_OBJECT_HANDLE_PTR	phNewObject
);

CK_DECLARE_FUNCTION (CK_RV, C_DestroyObject) (
	CK_SESSION_HANDLE	hSession,
	CK_OBJECT_HANDLE	hObject
);

CK_DECLARE_FUNCTION (CK_RV, C_GetObjectSize) (
	CK_SESSION_HANDLE	hSession,
	CK_OBJECT_HANDLE	hObject,
	CK_ULONG_PTR		pulSize
);

CK_DECLARE_FUNCTION (CK_RV, C_GetAttributeValue) (
	K_SESSION_HANDLE	Session,
	K_OBJECT_HANDLE		hObject,
	K_ATTRIBUTE_PTR		pTemplate,
	K_ULONG			ulCount
);

CK_DECLARE_FUNCTION (CK_RV, C_SetAttributeValue) (
	CK_SESSION_HANDLE	hSession,
	CK_OBJECT_HANDLE	hObject,
	CK_ATTRIBUTE_PTR	pTemplate,
	CK_ULONG		ulCount
);

CK_DECLARE_FUNCTION (CK_RV, C_FindObjectsInit) (
	CK_SESSION_HANDLE	hSession,
	CK_ATTRIBUTE_PTR	pTemplate,
	CK_ULONG		ulCount
);

CK_DECLARE_FUNCTION (CK_RV, C_FindObjects) (
	CK_SESSION_HANDLE	hSession,
	CK_OBJECT_HANDLE_PTR	phObject,
	CK_ULONG		ulMaxObjectCount,
	CK_ULONG_PTR		pulObjectCount
);

CK_DECLARE_FUNCTION (CK_RV, C_FindObjectsFinal) (
	CK_SESSION_HANDLE hSession
);

/* 5.8 Encryption functions */

CK_DECLARE_FUNCTION (CK_RV, C_EncryptInit) (
	CK_SESSION_HANDLE	Session,
	CK_MECHANISM_PTR	pMechanism,
	CK_OBJECT_HANDLE	hKey
);

CK_DECLARE_FUNCTION (CK_RV, C_Encrypt) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pData,
	CK_ULONG		ulDataLen,
	CK_BYTE_PTR		pEncryptedData,
	CK_ULONG_PTR		pulEncryptedDataLen
);

CK_DECLARE_FUNCTION (CK_RV, C_EncryptUpdate) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pPart,
	CK_ULONG		ulPartLen,
	CK_BYTE_PTR		pEncryptedPart,
	CK_ULONG_PTR		pulEncryptedPartLen
);

CK_DECLARE_FUNCTION (CK_RV, C_EncryptFinal) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pLastEncryptedPart,
	CK_ULONG_PTR		pulLastEncryptedPartLen
);

/* 5.9 Decryption functions */

CK_DECLARE_FUNCTION (CK_RV, C_DecryptInit) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism,
	CK_OBJECT_HANDLE	hKey
);

CK_DECLARE_FUNCTION (CK_RV, C_Decrypt) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pEncryptedData,
	CK_ULONG		ulEncryptedDataLen,
	CK_BYTE_PTR		pData,
	CK_ULONG_PTR		pulDataLen
);

CK_DECLARE_FUNCTION (CK_RV, C_DecryptUpdate) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pEncryptedPart,
	CK_ULONG		ulEncryptedPartLen,
	CK_BYTE_PTR		pPart,
	CK_ULONG_PTR		pulPartLen
);

CK_DECLARE_FUNCTION (CK_RV, C_DecryptFinal) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pLastPart,
	CK_ULONG_PTR		pulLastPartLen
);

/* 5.10 Message digesting functions */

CK_DECLARE_FUNCTION (CK_RV, C_DigestInit) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism
);

CK_DECLARE_FUNCTION (CK_RV, C_Digest) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pData,
	CK_ULONG		ulDataLen,
	CK_BYTE_PTR		pDigest,
	CK_ULONG_PTR		pulDigestLen
);

CK_DECLARE_FUNCTION (CK_RV, C_DigestUpdate) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pPart,
	CK_ULONG		ulPartLen
);

CK_DECLARE_FUNCTION (CK_RV, C_DigestKey) (
	CK_SESSION_HANDLE	hSession,
	CK_OBJECT_HANDLE	hKey
);

CK_DECLARE_FUNCTION (CK_RV, C_DigestFinal) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pDigest,
	CK_ULONG_PTR		pulDigestLen
);

/* 5.11 Signing and MACing functions */

CK_DECLARE_FUNCTION (CK_RV, C_SignInit) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism,
	CK_OBJECT_HANDLE	hKey
);

CK_DECLARE_FUNCTION (CK_RV, C_Sign) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pData,
	CK_ULONG		ulDataLen,
	CK_BYTE_PTR		pSignature,
	CK_ULONG_PTR		pulSignatureLen
);

CK_DECLARE_FUNCTION (CK_RV, C_SignUpdate) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pPart,
	CK_ULONG		ulPartLen
);

CK_DECLARE_FUNCTION (CK_RV, C_SignFinal) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pSignature,
	CK_ULONG_PTR		pulSignatureLen
);

CK_DECLARE_FUNCTION (CK_RV, C_SignRecoverInit) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism,
	CK_OBJECT_HANDLE	hKey
);

CK_DECLARE_FUNCTION (CK_RV, C_SignRecover) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pData,
	CK_ULONG		ulDataLen,
	CK_BYTE_PTR		pSignature,
	CK_ULONG_PTR		pulSignatureLen
);

CK_DECLARE_FUNCTION (CK_RV, C_VerifyInit) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism,
	CK_OBJECT_HANDLE	hKey
);

CK_DECLARE_FUNCTION (CK_RV, C_Verify) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pData,
	CK_ULONG		ulDataLen,
	CK_BYTE_PTR		pSignature,
	CK_ULONG		ulSignatureLen
);

CK_DECLARE_FUNCTION (CK_RV, C_VerifyUpdate) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pPart,
	CK_ULONG		ulPartLen
);

CK_DECLARE_FUNCTION (CK_RV, C_VerifyFinal) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pSignature,
	CK_ULONG		ulSignatureLen
);

CK_DECLARE_FUNCTION (CK_RV, C_VerifyRecoverInit) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism,
	CK_OBJECT_HANDLE	hKey
);

CK_DECLARE_FUNCTION (CK_RV, C_VerifyRecover) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pSignature,
	CK_ULONG		ulSignatureLen,
	CK_BYTE_PTR		pData,
	CK_ULONG_PTR		pulDataLen
);

/* 5.12 Dual-function cryptographic functions */

CK_DECLARE_FUNCTION (CK_RV, C_DigestEncryptUpdate) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pPart,
	CK_ULONG		ulPartLen,
	CK_BYTE_PTR		pEncryptedPart,
	CK_ULONG_PTR		pulEncryptedPartLen
);

CK_DECLARE_FUNCTION (CK_RV, C_DecryptDigestUpdate) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pEncryptedPart,
	CK_ULONG		ulEncryptedPartLen,
	CK_BYTE_PTR		pPart,
	CK_ULONG_PTR		pulPartLen
);

CK_DECLARE_FUNCTION (CK_RV, C_SignEncryptUpdate) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pPart,
	CK_ULONG		ulPartLen,
	CK_BYTE_PTR		pEncryptedPart,
	CK_ULONG_PTR		pulEncryptedPartLen
);

CK_DECLARE_FUNCTION (CK_RV, C_DecryptVerifyUpdate) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pEncryptedPart,
	CK_ULONG		ulEncryptedPartLen,
	CK_BYTE_PTR		pPart,
	CK_ULONG_PTR		pulPartLen
);

/* 5.13 Key management functions */

CK_DECLARE_FUNCTION (CK_RV, C_GenerateKey) (
	CK_SESSION_HANDLE	hSession
	CK_MECHANISM_PTR	pMechanism,
	CK_ATTRIBUTE_PTR	pTemplate,
	CK_ULONG		ulCount,
	CK_OBJECT_HANDLE_PTR	phKey
);

CK_DECLARE_FUNCTION (CK_RV, C_GenerateKeyPair) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism,
	CK_ATTRIBUTE_PTR	pPublicKeyTemplate,
	CK_ULONG		ulPublicKeyAttributeCount,
	CK_ATTRIBUTE_PTR	pPrivateKeyTemplate,
	CK_ULONG		ulPrivateKeyAttributeCount,
	CK_OBJECT_HANDLE_PTR	phPublicKey,
	CK_OBJECT_HANDLE_PTR	phPrivateKey
);

CK_DECLARE_FUNCTION (CK_RV, C_WrapKey) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism,
	CK_OBJECT_HANDLE	hWrappingKey,
	CK_OBJECT_HANDLE	hKey,
	CK_BYTE_PTR		pWrappedKey,
	CK_ULONG_PTR		pulWrappedKeyLen
);

CK_DECLARE_FUNCTION (CK_RV, C_UnwrapKey) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism,
	CK_OBJECT_HANDLE	hUnwrappingKey,
	CK_BYTE_PTR		pWrappedKey,
	CK_ULONG		ulWrappedKeyLen,
	CK_ATTRIBUTE_PTR	pTemplate,
	CK_ULONG		ulAttributeCount,
	CK_OBJECT_HANDLE_PTR	phKey
);

CK_DECLARE_FUNCTION (CK_RV, C_DeriveKey) (
	CK_SESSION_HANDLE	hSession,
	CK_MECHANISM_PTR	pMechanism,
	CK_OBJECT_HANDLE	hBaseKey,
	CK_ATTRIBUTE_PTR	pTemplate,
	CK_ULONG		ulAttributeCount,
	CK_OBJECT_HANDLE_PTR	phKey
);

/* 5.14 Random number generation functions */

CK_DECLARE_FUNCTION (CK_RV, C_SeedRandom) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pSeed,
	CK_ULONG		ulSeedLen
);

CK_DECLARE_FUNCTION (CK_RV, C_GenerateRandom) (
	CK_SESSION_HANDLE	hSession,
	CK_BYTE_PTR		pRandomData,
	CK_ULONG		ulRandomLen
);

/* 5.15 Parallel function management functions */

CK_DECLARE_FUNCTION (CK_RV, C_GetFunctionStatus) (
	CK_SESSION_HANDLE hSession
);

CK_DECLARE_FUNCTION (CK_RV, C_CancelFunction) (
	CK_SESSION_HANDLE hSession
);

/* NSS vendor-specific */

#define NSSCK_VENDOR_NSS	0x4E534350 /* NSCP */

#define CKO_NSS			(CKO_VENDOR_DEFINED | NSSCK_VENDOR_NSS)

#define CKO_NSS_CRL			(CKO_NSS + 1)
#define CKO_NSS_SMIME			(CKO_NSS + 2)
#define CKO_NSS_TRUST			(CKO_NSS + 3)
#define CKO_NSS_BUILTIN_ROOT_LIST	(CKO_NSS + 4)
#define CKO_NSS_NEWSLOT			(CKO_NSS + 5)
#define CKO_NSS_DELSLOT			(CKO_NSS + 6)

#define CKA_NSS			(CKA_VENDOR_DEFINED | NSSCK_VENDOR_NSS)

#define CKA_TRUST			(CKA_NSS + 0x2000)

/* usage key information */

#define CKA_TRUST_DIGITAL_SIGNATURE	(CKA_TRUST + 1)
#define CKA_TRUST_NON_REPUDIATION	(CKA_TRUST + 2)
#define CKA_TRUST_KEY_ENCIPHERMENT	(CKA_TRUST + 3)
#define CKA_TRUST_DATA_ENCIPHERMENT	(CKA_TRUST + 4)
#define CKA_TRUST_KEY_AGREEMENT		(CKA_TRUST + 5)
#define CKA_TRUST_KEY_CERT_SIGN		(CKA_TRUST + 6)
#define CKA_TRUST_CRL_SIGN		(CKA_TRUST + 7)

/* purpose trust information */

#define CKA_TRUST_SERVER_AUTH		(CKA_TRUST + 8)
#define CKA_TRUST_CLIENT_AUTH		(CKA_TRUST + 9)
#define CKA_TRUST_CODE_SIGNING		(CKA_TRUST + 10)
#define CKA_TRUST_EMAIL_PROTECTION	(CKA_TRUST + 11)
#define CKA_TRUST_IPSEC_END_SYSTEM	(CKA_TRUST + 12)
#define CKA_TRUST_IPSEC_TUNNEL		(CKA_TRUST + 13)
#define CKA_TRUST_IPSEC_USER		(CKA_TRUST + 14)
#define CKA_TRUST_TIME_STAMPING		(CKA_TRUST + 15)
#define CKA_TRUST_STEP_UP_APPROVED	(CKA_TRUST + 16)

#define CKA_CERT_SHA1_HASH		(CKA_TRUST + 100)
#define CKA_CERT_MD5_HASH		(CKA_TRUST + 101)

#define CKT_NSS			(CKT_VENDOR_DEFINED | NSSCK_VENDOR_NSS)

#define CKT_NSS_TRUSTED			(CKT_NSS + 1)
#define CKT_NSS_TRUSTED_DELEGATOR	(CKT_NSS + 2)
#define CKT_NSS_UNTRUSTED		(CKT_NSS + 3)
#define CKT_NSS_MUST_VERIFY		(CKT_NSS + 4)
#define CKT_NSS_TRUST_UNKNOWN		(CKT_NSS + 5)

/* TK26 vendor-specific */

#define NSSCK_VENDOR_PKCS11_RU_TEAM	(CKK_VENDOR_DEFINED | 0x54321000)
#define CK_VENDOR_PKCS11_RU_TEAM_TK26	NSSCK_VENDOR_PKCS11_RU_TEAM

#define CKK_GOSTR3410_256		CKK_GOSTR3410
#define CKK_GOSTR3410_512		(CK_VENDOR_PKCS11_RU_TEAM_TC26 + 3)

#define CKM_GOSTR3410_512_KEY_PAIR_GEN	(CK_VENDOR_PKCS11_RU_TEAM_TK26 + 5)
#define CKM_GOSTR3410_512		(CK_VENDOR_PKCS11_RU_TEAM_TK26 + 6)
#define CKM_GOSTR3410_2012_DERIVE	(CK_VENDOR_PKCS11_RU_TEAM_TK26 + 7)
#define CKM_GOSTR3410_12_DERIVE		CKM_GOSTR3410_2012_DERIVE
#define CKM_GOSTR3410_WITH_GOSTR3411_2012_256 (CK_VENDOR_PKCS11_RU_TEAM_TK26 + 8)
#define CKM_GOSTR3410_WITH_GOSTR3411_2012_512 (CK_VENDOR_PKCS11_RU_TEAM_TK26 + 9)
#define CKM_GOSTR3410_WITH_GOSTR3411_12_256 CKM_GOSTR3410_WITH_GOSTR3411_2012_256
#define CKM_GOSTR3410_WITH_GOSTR3411_12_512 CKM_GOSTR3410_WITH_GOSTR3411_2012_512

#define CKM_GOSTR3411_94		CKM_GOSTR3411
#define CKM_GOSTR3411_2012_256		(CK_VENDOR_PKCS11_RU_TEAM_TK26 + 0x12)
#define CKM_GOSTR3411_2012_512		(CK_VENDOR_PKCS11_RU_TEAM_TK26 + 0x13)
#define CKM_GOSTR3411_12_256		CKM_GOSTR3411_2012_256
#define CKM_GOSTR3411_12_512		CKM_GOSTR3411_2012_512

#define CKM_GOSTR3411_94_HMAC		CKM_GOSTR3411_HMAC
#define CKM_GOSTR3411_2012_256_HMAC	(CK_VENDOR_PKCS11_RU_TEAM_TK26 + 0x14)
#define CKM_GOSTR3411_2012_512_HMAC	(CK_VENDOR_PKCS11_RU_TEAM_TK26 + 0x15)
#define CKM_GOSTR3411_12_256		CKM_GOSTR3411_2012_256
#define CKM_GOSTR3411_12_512		CKM_GOSTR3411_2012_512

#define CKM_KDF_4357			(CK_VENDOR_PKCS11_RU_TEAM_TC26 + 0x25)
#define CKM_KDF_GOSTR3411_2012_256	(CK_VENDOR_PKCS11_RU_TEAM_TC26 + 0x26)

/* CryptoPro vendor-specific */

#define CKA_VENDOR_RU_CRYPTOPRO		(CKA_VENDOR_DEFINED | 0x00504300)

#define CKA_UEC_DERIVE_COUNTER		(CKA_VENDOR_RU_CRYPTOPRO + 5)
#define CKA_CP_PUBLICKEYBLOB		(CKA_VENDOR_RU_CRYPTOPRO + 6)
#define CKA_CP_PUBLICKEY		(CKA_VENDOR_RU_CRYPTOPRO + 7)
#define CKA_DUPLICATABLE		(CKA_VENDOR_RU_CRYPTOPRO + 8)

/* attributes for CryptoPro PKCS-oriented smart cards */
#define CKA_CPRU_PUBLIC_KEY_IDENTIFIERS	(CKA_VENDOR_RU_CRYPTOPRO + 9)
#define CKA_CPRU_DEF_FILE		(CKA_VENDOR_RU_CRYPTOPRO + 10)

/* attributes for T0-compatible file value */
#define CKA_CPRU_T0_VALUE_LENGTH	(CKA_VENDOR_RU_CRYPTOPRO + 11)
#define CKA_CPRU_T0_VALUE_AREA_BEGIN	(CKA_VENDOR_RU_CRYPTOPRO + 0x100)
#define CKA_CPRU_T0_VALUE_AREA_END	(CKA_VENDOR_RU_CRYPTOPRO + 0x1ff)
#define CKA_CPRU_T0_VALUE(n)		(CKA_CPRU_T0_VALUE_AREA_BEGIN + (n))

#define CKM_G28147_CNT			(CKA_VENDOR_RU_CRYPTOPRO + 0x14)
#define CKM_G28147_CFB			(CKA_VENDOR_RU_CRYPTOPRO + 0x15)
#define CKM_G28147_MAC_GENERAL		(CKA_VENDOR_RU_CRYPTOPRO + 0x17)
#define CKM_CP_G28147_WRAP		(CKA_VENDOR_RU_CRYPTOPRO + 0x18)
#define CKM_CP_G28147_CBC		(CKA_VENDOR_RU_CRYPTOPRO + 0x19)
#define CKM_G28147_CBC			(CKA_VENDOR_RU_CRYPTOPRO + 0x19)
#define CKM_CP_G28147_CBC_PAD		(CKA_VENDOR_RU_CRYPTOPRO + 0x20)
#define CKM_G28147_CBC_PAD		(CKA_VENDOR_RU_CRYPTOPRO + 0x20)

#define CKM_TLS_GOST_MASTER_KEY_DERIVE	(CKA_VENDOR_RU_CRYPTOPRO + 0x23)
#define CKM_TLS_GOST_KEY_AND_MAC_DERIVE	(CKA_VENDOR_RU_CRYPTOPRO + 0x24)
#define CKM_TLS_GOST_PRF		(CKA_VENDOR_RU_CRYPTOPRO + 0x25)

#define CKM_G28147_PRE_MASTER_KEY_GEN	(CKA_VENDOR_RU_CRYPTOPRO + 0x26)

#define CKM_UEC_ENC			(CKA_VENDOR_RU_CRYPTOPRO + 0x27)
#define CKM_UEC_HASH			(CKA_VENDOR_RU_CRYPTOPRO + 0x28)
#define CKM_UEC_EXTRACT_KEY_FROM_RSA	(CKA_VENDOR_RU_CRYPTOPRO + 0x29)
#define CKM_UEC_WRAP			(CKA_VENDOR_RU_CRYPTOPRO + 0x2a)

#define CKM_G28147_ECB			(CKA_VENDOR_RU_CRYPTOPRO + 0x2b)
#define CKM_G28147_ECB_PAD		(CKA_VENDOR_RU_CRYPTOPRO + 0x2c)
#define CKM_G28147_CNT_PAD		(CKA_VENDOR_RU_CRYPTOPRO + 0x2d)
#define CKM_G28147_CFB_PAD		(CKA_VENDOR_RU_CRYPTOPRO + 0x2e)

#define CKM_GOST28147_KEY_WRAP_FULLBLOB	(CKA_VENDOR_RU_CRYPTOPRO + 0x2f)

#endif  /* PKCS11_H */
